<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>Software Requirements Specification - IdentifyCarWashes</title>
<style>
  body { font-family: Calibri, Arial, sans-serif; font-size: 11pt; color: #000; }
  h1 { font-size: 20pt; margin: 0 0 8pt 0; }
  h2 { font-size: 16pt; margin: 18pt 0 6pt 0; }
  h3 { font-size: 13pt; margin: 14pt 0 6pt 0; }
  p { margin: 6pt 0; }
  ul { margin: 6pt 0 6pt 18pt; }
  table { border-collapse: collapse; width: 100%; margin: 8pt 0 14pt 0; }
  th, td { border: 1px solid #000; padding: 6pt; vertical-align: top; }
  th { background: #f0f0f0; }
  .no-border th, .no-border td { border: none; }
  .center { text-align: center; }
  .toc td { border: none; }
</style>
</head>
<body>
  <h1>HACKATHON PROJECT</h1>
  <h2>TOPIC – IdentifyCarWashes</h2>
  <h2>SOFTWARE REQUIREMENTS SPECIFICATIONS</h2>

  <table class="no-border" style="margin-top:18pt;">
    <tr>
      <th></th>
      <th>Prepared By</th>
      <th>Reviewed By</th>
      <th>Approved By</th>
    </tr>
    <tr>
      <td><strong>Name</strong></td>
      <td>IdentifyCarWashes Team</td>
      <td>QA Lead</td>
      <td>Product Owner</td>
    </tr>
    <tr>
      <td><strong>Role</strong></td>
      <td>SDET / QA Automation</td>
      <td>Batch Trainer</td>
      <td>PO</td>
    </tr>
  </table>

  <h2>Table of Contents</h2>
  <table class="toc">
    <tr><td>Table of Contents……………………………………………………………………….……II</td></tr>
    <tr><td>1. Introduction………………………………………………………………………………..1</td></tr>
    <tr><td>&nbsp;&nbsp;&nbsp;&nbsp;1.1 Intended Audience……………………………………………………………………1</td></tr>
    <tr><td>&nbsp;&nbsp;&nbsp;&nbsp;1.2 Project Scope……………………………………………………………………………1</td></tr>
    <tr><td>2. Overall Description………………………………………………………………………1</td></tr>
    <tr><td>&nbsp;&nbsp;&nbsp;&nbsp;2.1 Operating Environment………………………………………………………………1</td></tr>
    <tr><td>3. Requirements………………………………………………………………………………1</td></tr>
    <tr><td>&nbsp;&nbsp;&nbsp;&nbsp;3.1 Functional Areas………………………………………………………………………2</td></tr>
  </table>
  <p><em>This document uses headings compatible with Word’s table of contents.</em></p>

  <h2>1. INTRODUCTION</h2>
  <p>The purpose of this project is to develop an automated web-based solution that identifies and extracts relevant information about car wash services from local listing platforms (e.g., Justdial-like flows). The system focuses on three core functionalities: searching for car wash providers, filtering and analyzing results, and interacting with service pages and contact flows including phone number reveal and inquiry submission. This automation streamlines service discovery, data extraction, and validation testing, aiding user experience and regression coverage.</p>

  <h3>1.1 Intended Audience</h3>
  <ul>
    <li>Business Unit (BU) SME</li>
    <li>Automation/QA Team</li>
    <li>Technical Trainer / QA Lead</li>
    <li>Product Owner</li>
  </ul>

  <h3>1.2 Project Scope</h3>
  <p>This document defines the system’s functional activities and governing rules, and outlines the high-level and detailed requirements essential for successful implementation.</p>
  <p>The scope draws on the proposed automation framework, business rules, and technical architecture to describe behavior, structure, and interactions.</p>
  <p>Specifically, the document includes:</p>
  <ul>
    <li><strong>Classification of Requirements by Functional Areas</strong>: search, filters, category navigation, service page interactions, number popup validation, free listing authentication, data retrieval, and data-driven execution.</li>
    <li><strong>Process Descriptions</strong>: inputs/outputs and transformation rules for each process, including:</li>
  </ul>
  <ul>
    <li>Searching and filtering car wash providers by rating, distance, and open-now.</li>
    <li>Extracting listing metadata such as name, rating, address, and phone.</li>
    <li>Validating error handling for invalid inputs on service/contact forms.</li>
    <li>Validating phone number reveal and formatting.</li>
    <li>Reading test data from Excel for data-driven test execution.</li>
  </ul>

  <h2>2. OVERALL DESCRIPTION</h2>
  <p>This section provides a high-level overview of the system, including its environment, user interactions, and general constraints.</p>

  <h3>2.1 Operating Environment</h3>
  <ul>
    <li><strong>Operating System</strong>: Windows 10 or later.</li>
    <li><strong>Application Type</strong>: Web-based local listing site (car washes), dynamic elements, forms, dropdowns, infinite scroll, and modals.</li>
    <li><strong>Programming Language</strong>: Java with OOP and modular design.</li>
    <li><strong>Automation Tools & Frameworks</strong>:
      <ul>
        <li>Selenium WebDriver for browser automation</li>
        <li>TestNG and/or Cucumber for test orchestration and BDD</li>
        <li>Apache POI for Excel-driven data</li>
        <li>Page Object Model (POM)</li>
        <li>Allure/Extent for reporting</li>
      </ul>
    </li>
    <li><strong>Browser Support</strong>: Chrome and Edge with appropriate WebDrivers</li>
    <li><strong>Network Requirements</strong>: Stable internet connectivity for live interactions</li>
  </ul>

  <h2>3. REQUIREMENTS</h2>
  <p>This section presents the IdentifyCarWashes application functionality: searching for car wash providers, filtering results, validating contact/number reveal flows, and retrieving listing data. The following functional requirements map to the implemented BDD features.</p>

  <h3>3.1 Functional Requirements</h3>

  <h3>3.1.1 Req0001 – Search Car Wash Providers</h3>
  <ul>
    <li>Req0001a – User enters location/category and initiates search.</li>
    <li>Req0001b – System navigates to results page and displays listing cards.</li>
    <li>Req0001c – Validate page title and presence of result count.</li>
    <li>Req0001d – Verify top results contain expected keywords (e.g., "car wash").</li>
  </ul>

  <h3>3.1.2 Req0002 – Apply and Validate Filters</h3>
  <ul>
    <li>Req0002a – Apply rating/open-now/distance filters.</li>
    <li>Req0002b – Validate results comply with selected filters.</li>
    <li>Req0002c – Clear filters and verify full result set is restored.</li>
  </ul>

  <h3>3.1.3 Req0003 – Category Display on Home</h3>
  <ul>
    <li>Req0003a – Verify car wash category tiles are visible.</li>
    <li>Req0003b – Click a category and validate navigation to listings.</li>
  </ul>

  <h3>3.1.4 Req0004 – Service Page Inquiry</h3>
  <ul>
    <li>Req0004a – Open a provider’s service page from results.</li>
    <li>Req0004b – Submit valid inquiry and verify success acknowledgement.</li>
    <li>Req0004c – Submit invalid data and validate inline error messages.</li>
  </ul>

  <h3>3.1.5 Req0005 – Show Number Popup</h3>
  <ul>
    <li>Req0005a – Click "Show Number" and validate popup visibility.</li>
    <li>Req0005b – Validate number masking/unmasking and phone format.</li>
  </ul>

  <h3>3.1.6 Req0006 – Free Listing Login/Register</h3>
  <ul>
    <li>Req0006a – Navigate to Free Listing and open login/register.</li>
    <li>Req0006b – Log in/register with valid credentials from Excel.</li>
    <li>Req0006c – Validate error message for existing user/invalid credentials.</li>
  </ul>

  <h3>3.1.7 Req0007 – Retrieve Items from Results</h3>
  <ul>
    <li>Req0007a – Extract names/ratings/addresses of first N listings.</li>
    <li>Req0007b – Persist details to report/console/Excel.</li>
  </ul>

  <h3>3.1.8 Req0008 – Data-Driven Execution</h3>
  <ul>
    <li>Req0008a – Read multiple search inputs from Excel.</li>
    <li>Req0008b – Execute search and validations per data row.</li>
  </ul>

  <p><em>Traceability</em>: Each requirement aligns with feature files under <code>src/test/resources/features/</code> and is implemented via Page Objects in <code>src/main/java/pages/</code>.</p>
</body>
</html> 