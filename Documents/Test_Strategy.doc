<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>Test Strategy – IdentifyCarWashes</title>
<style>
  body { font-family: Calibri, Arial, sans-serif; font-size: 11pt; color: #000; }
  h1 { font-size: 20pt; text-align: center; margin: 0 0 8pt 0; }
  h2 { font-size: 16pt; margin: 18pt 0 6pt 0; }
  h3 { font-size: 13pt; margin: 14pt 0 6pt 0; }
  p { margin: 6pt 0; }
  ul { margin: 6pt 0 6pt 18pt; }
  table { border-collapse: collapse; width: 100%; margin: 8pt 0 14pt 0; }
  th, td { border: 1px solid #000; padding: 6pt; vertical-align: top; }
  th { background: #f0f0f0; }
  .no-border th, .no-border td { border: none; }
  .center { text-align: center; }
</style>
</head>
<body>
  <h1>TEST STRATEGY – IdentifyCarWashes</h1>

  <h2 class="center">HACKATHON PROJECT</h2>
  <h2 class="center">Test Strategy</h2>

  <table class="no-border" style="margin-top:18pt;">
    <tr>
      <td><strong>Author:</strong> BUG BUSTERS</td>
      <td><strong>Date:</strong> 15/07/2025</td>
      <td><strong>Version Number:</strong> 001</td>
    </tr>
  </table>

  <h2>Table of Contents</h2>
  <ul>
    <li>1.0 Introduction</li>
    <li>1.1 Purpose</li>
    <li>1.2 Target Audience</li>
    <li>2.0 System Description</li>
    <li>3.0 Test Deliverables</li>
    <li>4.0 Test Types</li>
    <li>5.0 Multi-Browser Testing</li>
    <li>6.0 Test Data</li>
    <li>7.0 Resources Required</li>
  </ul>

  <h2>1.0 Introduction</h2>

  <h3>1.1 Purpose</h3>
  <p>The Test Strategy document outlines the approach for testing the automation workflows implemented for the IdentifyCarWashes project. It defines the types and levels of testing to be performed and ensures that all critical functionalities—both newly developed and existing—are validated effectively.</p>
  <p>This document also establishes the scope of testing, which includes the development of test conditions, test cases, test data, automation scripts, and effort estimation. It serves as a communication tool to identify and address testing-related issues early in the project lifecycle.</p>

  <h3>1.2 Target Audience</h3>
  <ul>
    <li>Business Unit (BU) SME</li>
    <li>Academy Coach</li>
    <li>Technical Trainer</li>
  </ul>

  <h2>2.0 System Description</h2>
  <p>IdentifyCarWashes validates essential user workflows on a car-wash listing platform: product (service) search, category navigation, filtering, provider detail page verification, contact/inquiry validation, and footer link checks. The project uses a Selenium-based hybrid framework with POM, TestNG/Cucumber, and data-driven testing.</p>

  <h2>3.0 Test Deliverables</h2>
  <table>
    <tr>
      <th>Project Phase</th>
      <th>Deliverables</th>
    </tr>
    <tr>
      <td>Test Planning</td>
      <td>Test Strategy Document</td>
    </tr>
    <tr>
      <td>Test Analysis & Design</td>
      <td>Test Conditions, Test Cases, Test Data, Test Environment, Automated Test Scripts</td>
    </tr>
    <tr>
      <td>Test Execution</td>
      <td>Test Logs</td>
    </tr>
    <tr>
      <td>Test Completion</td>
      <td>Test Summary Report</td>
    </tr>
  </table>

  <h2>4.0 Test Types</h2>
  <p>The following types of testing are applied to validate IdentifyCarWashes workflows:</p>
  <ul>
    <li><strong>Functional Testing</strong> – Verify feature behavior (search, filters, service page queries, show number popup, free listing login).</li>
    <li><strong>Regression Testing</strong> – Ensure new changes do not affect existing functionality.</li>
    <li><strong>Automation Testing</strong> – Execute repetitive and data-driven test cases efficiently using Java, Selenium, TestNG, and Cucumber.</li>
  </ul>

  <h2>5.0 Multi-Browser Testing</h2>
  <p>To ensure cross-browser compatibility, automation scripts are executed on:</p>
  <ul>
    <li>Google Chrome</li>
    <li>Microsoft Edge</li>
  </ul>
  <p>This validates consistent behavior across different browsers.</p>

  <h2>6.0 Test Data</h2>
  <p>Test data is managed using Excel and property files:</p>
  <ul>
    <li><strong>Excel Files</strong>: Store input data and expected results (<code>testdata/test_data.xlsx</code>).</li>
    <li><strong>Apache POI</strong>: For reading and writing Excel data.</li>
    <li><strong>Property Files</strong>: Configuration details such as URL, browser, and credentials (<code>src/main/resources/config.properties</code>).</li>
    <li><strong>JSON/XML/TXT</strong>: For structured/unstructured supplemental data (<code>JsonUtility</code> present).</li>
  </ul>
  <p>Data-driven testing supports multiple scenarios and improves coverage.</p>

  <h2>7.0 Resources Required</h2>

  <h3>7.1 Hardware</h3>
  <ul>
    <li>Personal Computer (PC)</li>
  </ul>

  <h3>7.2 Software</h3>
  <ul>
    <li>Windows 10 and above</li>
    <li>Google Chrome 60+</li>
    <li>Microsoft Edge</li>
    <li>Microsoft Excel</li>
    <li>Java Development Kit (JDK)</li>
    <li>Selenium WebDriver</li>
    <li>Apache POI</li>
    <li>TestNG</li>
    <li>Cucumber (for BDD implementation)</li>
    <li>Selenium Grid (optional)</li>
    <li>Allure/Extent (reporting)</li>
  </ul>
</body>
</html> 